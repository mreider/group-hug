h3(#top). Building the Group Hug Rails app

These steps show you how to build a the Group Hug Rails application and deploy it on the Engine Yard Cloud. If you prefer video over written tutorials, you can view some helpful "screencasts here":http://engineyard.com/university. 

h4. Table of Contents

# "Install Ruby, Rails, and create the app":#install
# "Create a Facebook application":#facebook
# "Configure Facebooker in Rails":#configFB
# "Creating the Layout":#layout
# "Adding the Facebook Connect button":#fbconnect
# "Tying in the database":#database
# "Users, Sessions, and Logins":#usl
# "List the user's Facebook groups":#listgroups
# "Using JQuery to save the Default Group":#jquery
# "Showing posts":#showposts
# "Get Group Messages, and Profile pictures using Mogli":#mogli
# "Post Messages to Facebook":#postmess
# "Implementing pagination":#pagination
# "Tying up loose ends":#looseends
# "Creating the second Facebook app for production":#fb2
# "Deploying on Engine Yard":#deploy 

h4. A little Warning

Before you start this tutorial, you really, really, truly, deeply, sorta, kinda have to login to the application and use it. It's the only way to understand what you will be building.

h4(#install). Install Ruby, Rails, and create the app

"top":#top

* To install Rails on Windows, you can use the "Rails Installer":http://railsinstaller.org. 

* On OSX or Linux, you can use RVM by entering the following in your terminal ( see "prerequisites here":http://icanhazrails.com/user/prereqs ):

p(codey). curl -O -L http://rvm.beginrescueend.com/src/bootstrap_rails_environment && source ./bootstrap_rails_environment

* Create rails app:

p(codey). rails new grouphug

* Install facebooker2 as a plugin. This is a popular library for interfacing Rails applications with Facebook. "The github for Facebookr2 is here":https://github.com/mmangino/facebooker2

p(codey). script/rails plugin install git://github.com/mmangino/facebooker2.git

p(clues). *What's a plugin?* Watch a  screen cast by Ryan Bigg

p(clues). *What's Facebooker2* Watch a screen cast by Christopher Johnson

h4(#facebook). Create a Facebook application

"top":#top

* Login to Facebook and visit "http://www.facebook.com/developers/createapp.php":http://www.facebook.com/developers/createapp.php.

* We need to create two Facebook applications, one for development, and one for production. Name the first one something fun, with @_development@ at the end. We called ours icanhazrails_development.

!http://icanhazrails.com/images/fbapp.png(fb create app)!

* Click Create App

* Go to the Website settings, and set the site URL to the IP address of your computer.

!http://icanhazrails.com/images/wurl.png(fb website settings)!

h4(#ConfigFB). Configure Facebooker in Rails

"top":#top

* Copy the settings from your Facebook application page. To find your settings, go to "the facebook developer page":http://www.facebook.com/developers/ and click on the application you created. The page should appear as follows:

!http://icanhazrails.com/images/appsettings.png(fb app settings)!

* Create @config/facebooker.yml@ and paste the settings from your application page as follows:

p(codey). development:
&nbsp; app_id: your application id
&nbsp; secret: your application secret
&nbsp; api_key: your application key

* Create @config/initializers/facebooker2.rb@ and place the following line in it.

p(codey). Facebooker2.load_facebooker_yaml

p(clues). *What's YAML?* Watch a screen cast by Matt Reider

* Add the following line to @app/controllers/application_controller.rb@

p(codey). include Facebooker2::Rails::Controller

p(clues). *What's a Controller?* Watch a screen cast by Ryan Bigg

h4(#layout). Creating the Layout

"top":#top

* In rails, there is a special Layout in @app/views/layouts/application.html.erb@. This file will be sent to the browser no matter what page is sent. It's the perfect place to put headers and footers. Place some standard HTML in that file, and include the Ruby @yield@ method as the placeholder for running the actual page that was requested.

p(clues). *What's a Layout?* Watch a screen cast by Ryan Bigg

p(codey). &lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot;
&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;
&lt;head&gt;
&lt;title&gt;An XHTML 1.0 Strict standard template&lt;/title&gt;
&lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf-8&quot; /&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;%= yield %&gt;
&lt;/body&gt;
&lt;/html&gt;

h4(#fbconnect). Adding the Facebook Connect button

"top":#top

* Put some more code into @app/views/layouts/application.html.erb@ to display the Facebook login button on every page. The conditional logic will replace the login button with the user's name, if he/she is already logged in. Here we are using embedded ruby. Put this code above the yield method:

p(codey). &lt;%# include JavaScript to use facebook connect%&gt;
&lt;%=fb_connect_async_js%&gt;
&lt;%if current_facebook_user !=nil%&gt;
&lt;%=&quot;Welcome #{@current_user.name}!&quot;  if @current_user !=nil%&gt;
&lt;%=fb_logout_link(&quot;Logout&quot;, request.url)%&gt;&lt;br /&gt;
&lt;%else%&gt;
&lt;%=fb_login_and_redirect( url_for(:action =&gt; 'create', :controller =&gt; 'user', :only_path =&gt; false), :perms =&gt; 'email,user_groups,read_stream, publish_stream')%&gt;
&lt;%end%&gt;

p(clues). *What's Embedded Ruby?* Watch a screen cast by Christopher Johnson

h4(#database). Tying in the database

"top":#top

* Create the model to store application users

p(codey). rails generate model User

p(clues). *What's a Model?* Watch a screen cast by Ryan Bigg
	
* Then create a database migration file by typing

p(codey). rails generate migration create_users

p(clues). *What's a Database Migration?* Watch a screen cast by Ryan Bigg

This creates a file in the folder @db/migrate/@ named something like @20110203050933_create_users.rb@

p(codey). class CreateUsers < ActiveRecord::Migration
&nbsp;def self.up
&nbsp;&nbsp;create_table :users do |t|
&nbsp;&nbsp;t.string :email, :name, :facebook_id, :facebook_session_key, t.timestamps
&nbsp;&nbsp;end
&nbsp;end
&nbsp;
&nbsp;def self.down
&nbsp;&nbsp;drop_table :users
&nbsp;end
end

* Run the migration
  
p(codey). rake db:migrate

h4(#usl). Users, Sessions, and Logins

"top":#top

* Create the user controller and login action

p(codey). rails generate controller User

* Open the page you just created @app/controllers/user_controllers.rb@

* Create an empty action for the login page, this will just show the login button, which we already put on the application.html.erb page.

p(codey). def login
end

* Create two other methods  in the same controller, underneath the login action. The first action will be called @create@ and it will create a session. The second one will be called create_via_facebook_connect and it is called from the former method to grab the user id for this facebook user from the local database, or create a new record if the user has never signed into group hug before. 

p(codey). def create
&nbsp;&#64;user = User.find_by_email(params[:email]) 
&nbsp;create_via_facebook_connect if &#64;user.nil?
&nbsp;if &#64;user != nil 
&nbsp;&nbsp;session[:user_id] = &#64;user.id
&nbsp;&nbsp;redirect_to url_for(groups_path)
&nbsp;&nbsp;session[:return_to]=nil
&nbsp;else
&nbsp;&nbsp;flash[:error] = "Unable to log you in"
&nbsp;&nbsp;render :action=>"login"
&nbsp;end
end
&nbsp;
def create_via_facebook_connect
&nbsp;if current_facebook_user 
&nbsp;&nbsp;#look for an existing user
&nbsp;&nbsp;&#64;user = User.find_by_facebook_id(current_facebook_user.id)	  
&nbsp;&nbsp;if &#64;user.nil?
&nbsp;&nbsp;&nbsp;#if one isn't found - fetch user data via Mogli lib and create new user
&nbsp;&nbsp;&nbsp;current_facebook_user.fetch
&nbsp;&nbsp;&nbsp;&#64;user = User.new(:name => current_facebook_user[:name], :email => current_facebook_user[:email], :facebook_id => current_facebook_user[:id], :facebook_session_key => current_facebook_client.access_token)
&nbsp;&nbsp;&nbsp;&#64;user.save
&nbsp;&nbsp;end
&nbsp;end
end

* Create an empty view for the login page ( @app/views/user/login.html.erb@ ). Remember, the login button is actually in the application.html.erb page, which puts it on every view.
  
* Edit the view as follows:

p(codey). def create
&nbsp;&#64;user = User.find_by_email(params[:email])
&nbsp;create_via_facebook_connect if &#64;user.nil?
&nbsp;if &#64;user != nil 
&nbsp;&nbsp;session[:user_id] = &#64;user.id
&nbsp;&nbsp;redirect_to url_for(groups_path)
&nbsp;&nbsp;session[:return_to]=nil
&nbsp;else
&nbsp;&nbsp;flash[:error] = "Unable to log you in"
&nbsp;&nbsp;render :action=>"login"
&nbsp;end
end
&nbsp;
def create_via_facebook_connect
&nbsp;if current_facebook_user 
&nbsp;&nbsp;#look for an existing user
&nbsp;&nbsp;&#64;user = User.find_by_facebook_id(current_facebook_user.id)	  
&nbsp;&nbsp;if &#64;user.nil?
&nbsp;&nbsp;&nbsp;#if one isn't found - fetch user data via Mogli lib and create new user
&nbsp;&nbsp;&nbsp;current_facebook_user.fetch
&nbsp;&nbsp;&nbsp;&#64;user = User.new(:name => current_facebook_user[:name], :email => current_facebook_user[:email], :facebook_id => current_facebook_user[:id], :facebook_session_key => current_facebook_client.access_token)
&nbsp;&nbsp;&#64;user.save
&nbsp;&nbsp;end
&nbsp;end
end

* After successful login users will go to groups controller.  Let's create a groups controller first:

p(codey). rails generate controller Groups
	  
* Now we can edit @config/routes.rb@ to send people to the groups controller whenever a url is requested with the verb 'groups' after the domain name. For instance @http://icanhazrails.com/groups@ will load the controller @app/controllers/groups_controller.rb@. You created that controller when you typed the generate command in the last step.
    
p(codey). resources :groups 
   
* Set the home page to login
   
p(codey). resources :groups root :to => "user#login"

* Use standard '&lt;controller&gt;/&lt;action&gt;'	routes by uncommenting the line in your @config/routes.rb@
   
p(codey). match ':controller(/:action(/:id(.:format)))'
	   
* Add methods to ApplicationController ( @app/controllers/application_controller.rb@ ) to check if the user has logged in and determine his/her user id. Things in the ApplicationController are available to every controller in the application.

p(codey). def current_user
&nbsp;if session[:user_id]
&nbsp;&nbsp;&#64;current_user ||= User.find(session[:user_id])
&nbsp;elsif current_facebook_user and &#64;current_user.nil?
&nbsp;&nbsp;&#64;current_user = User.find_by_facebook_id(current_facebook_user.id)
&nbsp;end
end
	  
* Next, we make the above code a helper method. This is a bit of trickery in that usually helper methods are created in their own files under the helpers directory and are more useful in views, rather than controllers, because they are visual. We will create non-tricky helper methods in a few minutes. This tricky one is turned into a helper method using the @helper_method@ method.

p(clues). *What's a Helper Method?* Watch a screen cast by Ryan Bigg

p(codey). helper_method :current_user

* Also in the ApplicationController is a method for checking if the user is logged in.
	  
p(codey). def login_required
&nbsp;if current_user.nil?
&nbsp;&nbsp;flash[:notice] = "You must login to access this page"
&nbsp;&nbsp;session[:return_to] = request.request_uri
&nbsp;&nbsp;redirect_to :controller =>'user', :action =>'login' and return
&nbsp;end
end

* Next we edit the groups controller @app/controllers/groups_controller.rb@. The first thing we will do is add the before_filter method, which basically intercepts every request to the controller, and runs certain method before anything else has a chance. In this case, we are going to run the login_required method to make sure the user is logged in.

p(codey). before_filter :login_required

h4(#listgroups). List the user's Facebook groups

"top":#top

* To grab the user's Facebook groups, define the default behavior (index) for the group controller. Note that we have some extra code in there that let's the user set a default group, which we will save in the database a little later in the tutorial.	  

p(codey). def index 
&nbsp;#get current users groups
&nbsp;&#64;groups = current_facebook_user.groups
&nbsp;#determine selected user group or get first group id if default group is not selected
&nbsp;&#64;default_group = &#64;current_user.default_group
&nbsp;&#64;default_group = &#64;groups.first.id if &#64;default_group.nil? && &#64;groups.first != nil
&nbsp;if (params[:current_group] != nil)
&nbsp;&nbsp;&#64;current_group = params[:current_group]
&nbsp;else
&nbsp;&nbsp;&#64;current_group = &#64;default_group
&nbsp;end
end
	
* Open the groups view ( @app/views/groups/index.html.erb@ ). This was automagically created when you generated the controller.

* Add some HTML and embedded ruby to this view. This creates a select box of all the groups the user has on Facebook. The inner HTML of the posts container will be replaced with the group posts from Facebook using JQuery in a minute.

p(codey). &lt;select name=&quot;group&quot; id=&quot;group&quot;&gt;
&lt;% @groups.each do |group| %&gt;
&lt;option value=&quot;&lt;%=group.id%&gt;&quot; &lt;%= 'selected' if @default_group == group.id %&gt;&gt;&lt;%=group.name%&gt;&lt;/option&gt;
&lt;% end %&gt;
&lt;/select&gt;
&lt;br/&gt;
&lt;input id=&quot;def_group&quot; name=&quot;def_group&quot; type=&quot;checkbox&quot; selected=&quot;false&quot; /&gt; Default group &lt;br/&gt;
&lt;div id=&quot;posts_container&quot; &gt;Posts&lt;/div&gt;

h4(#jquery). Using JQuery to save the Default Group

"top":#top

* We will use JQuery to communicate with Facebook when a user selects their default group using the checkbox.

* Install jQuery via the instructions at @https://github.com/lleger/Rails-3-jQuery/@

p(clues). *How does JQuery work?* Watch a screen cast by Matt Dolian

* We need to tell Rails to load any Javascript (JQuery in particular) that is sent to the page. You will see how to send it in a moment. Right now, we're just receiving it. Go back and edit the @app/viewslayouts/application.html.erb@ and put this up in the header of your HTML document.

p(codey). &lt;script&gt; 
&lt;%= yield (:javascript) %&gt;
&lt;/script&gt;

* Now put some JQuery on the group view ( @app/views/groups/index.html.erb@ ). We send it back to that yield statemement, above, using the @content_for@ method like this:
	
p(codey). &lt;% content_for (:javascript) do %&gt;
var def_group = '<%=@default_group%>';

* We also set a little Ruby code inside of the JQuery script for the default group. This value comes from the groups_controller. Hopefully you are seeing, now how controllers send data to views.

* Under this last chunk, we put the JQuery code, which handles events for when the user clicks the checkbox to select their default group.

p(codey). &nbsp;$(document).ready(function() {
&nbsp;&nbsp;// bind checkbox change
&nbsp;&nbsp;$('#def_group').bind('change', function() {
&nbsp;&nbsp;&nbsp;var group_id = $(this).is(':checked') ? $('#group').val() : 'nil'
&nbsp;&nbsp;&nbsp;$.post('/groups/set_default/' + group_id ,  function() {
&nbsp;&nbsp;&nbsp;&nbsp;alert ('Default group was saved');
&nbsp;&nbsp;&nbsp;});
&nbsp;&nbsp;&nbsp;//chenge default group
&nbsp;&nbsp;&nbsp;def_group = group_id == 'nil' ? null : group_id;
&nbsp;&nbsp;});
&nbsp;});
&lt;% end %&gt;

* So now we have combo box with all user groups.
	 
* Notice that the JQuery code posts the default @group_id@ to the groups controller, and calls the @set_default@ method. Let's build this method in GroupsController ( @app/controllers/groups_controller.rb@ ) 

p(codey). def set_default
&nbsp;render :json => { :result => @current_user.update_attributes(:default_group => params['id'] == 'nil' ? nil : params['id']) }
end

h4(#showposts). Showing posts

"top":#top

* Lets use nested resources to relate groups and posts. Open your config/routes.rb file and add the following:
	
p(codey). resources :groups do
&nbsp;resources :posts
end

p(clues). *What's a Nested Resource?* See this screencast by Danish Khan
	
* Using JQuery, we will bind the select list to the post container, meaning that every time the select box is changed, the inner html of the post container will be replaced with messages from that Facebook group.  

* We put this code in the document.ready block, underneath the code you wrote a few steps ago in @app/views/groups/index.html.erb@

p(codey). // bind select group
$('#group').bind('change', function() {
&nbsp; $('#posts_container').html('&lt;p&gt;Loading...&lt;/p&gt;');
&nbsp; loadData('/groups/' + $(this).val() + '/posts', null)
&nbsp; //check if current group is default and mark checkbox checked or not
&nbsp;$('#def_group').attr('checked', $(this).val() == def_group);
});
}); //ends the document.ready block

* In the same page ( @app/views/groups/index.html.erb@ ) create another function to load the data

p(codey). function loadData(rem_url, params) {
&nbsp;var temp = rem_url; 
&nbsp;if (params != null ) {
&nbsp;&nbsp;temp += '?' + params;
&nbsp;}
&nbsp;$('#loading_div').show();
&nbsp;$.ajax({ url: temp,
&nbsp;&nbsp;dataType: 'html',
&nbsp;&nbsp;type: 'GET',
&nbsp;&nbsp;error: function(req,data) {
&nbsp;&nbsp;&nbsp;alert("Error getting remote data: " + data);
&nbsp;&nbsp;&nbsp;$('#loading_div').hide();
&nbsp;&nbsp;},
&nbsp;&nbsp;success: function(data) {
&nbsp;&nbsp;&nbsp;$('#loading_div').hide();
&nbsp;&nbsp;&nbsp;$('#posts_container').html(data);
&nbsp;&nbsp;&nbsp;FB.XFBML.parse(document.getElementById('posts_container'));
&nbsp;&nbsp;}
&nbsp;});
}

p(clues). The Facebook magic in this JQuery script is well documented at the Facebook Developer page "here:":http://developers.facebook.com/docs/reference/javascript/fb.xfbml.parse/

* Finally, we add some code (same page still) that will display the default group when the page loads:
	  
p(codey). $('#posts_container').load('/groups/<%=@default_group%>/posts',  function() {
&nbsp;FB.XFBML.parse(document.getElementById('posts_container'));
});

h4(#mogli). Get Group Messages, and Profile pictures using Mogli

"top":#top

* Mogli is a Ruby Gem that is installed with Facebookr2 as one of its dependencies. It is the Facebook Open Graph Library for Ruby. You can read more about Open Graph "here":http://developers.facebook.com/docs/opengraph/. In a nuthsell, Open Graph lets Ruby developer integrate their websites with Facebook, so that users don't have to visit Facebook to interact with it. We use Mogli to retrieve the posts for the selected group, as well as attributes like profile pictures.

* Here, we grab messages for the selected group @app/controllers/posts_controller.rb@. 

p(codey). def index    
&nbsp;@group = Mogli::Group.new({:id=>params['group_id']}, current_facebook_client)
&nbsp;@group.fetch
&nbsp;#getting posts for page 0
&nbsp;@posts = @group.feed
&nbsp;render :layout => false
end

* Then we show the messages, along with facebook profile pics in  @app/views/posts/index.rb@:

p(codey). &lt;% @posts.each do |post| %&gt;
&nbsp;&lt;% begin %&gt;
&nbsp;&nbsp;&lt;div class="post"&gt;
&nbsp;&nbsp;&lt;span class="pic"&gt;&lt;fb:profile-pic uid="&lt;%=post.from.id if post.from !=nil%&gt;" linked="false" size="q"&gt;&lt;/fb:profile-pic&gt;&lt;br/&gt;
&nbsp;&nbsp;&lt;% from = post.from.fetch if post.from !=nil %&gt; &lt;%=from[:first_name] if from != nil %&gt; &lt;%=from[:last_name]  if from != nil %&gt;
&nbsp;&nbsp;&lt;/span&gt;
&nbsp;&nbsp;&lt;span&gt;
&nbsp;&nbsp;&lt;%=post.message%&gt;&lt;br/&gt; 
&nbsp;&nbsp;&lt;%= time_ago_in_words(post.updated_time) %&gt; ago
&nbsp;&nbsp;&lt;/span&gt;
&nbsp;&nbsp;&lt;/div&gt; 		  
&nbsp;&lt;% rescue %&gt;  
&nbsp;&lt;% end %&gt;
&lt;% end %&gt;	 

h4(#postmess). Post Messages to Facebook

"top":#top

* At the top of the page (above the code you just inserted), create a link to post a new message in @app/views/posts/index.rb@:

p(codey). &lt;%= link_to "Post", url_for(new_group_post_path(@group.id)) %&gt;	
	
* Before we display a form to post messages to Facebook groups, we need to figure out which group is the currently selected one. We do this on @app/controllers/posts_controller.rb@.

p(codey). def new
&nbsp;@group = Mogli::Group.new({:id=&gt;params['group_id']}, current_facebook_client)
&nbsp;@group.fetch
end

* Then we create a simple view for new posts in @app/views/posts/new.rb@:

p(codey). &lt;h1&gt;Post a wall message to: &lt;%= @group.name %&gt;&lt;/h1&gt;
&lt;% form_tag  url_for(group_posts_path(@group.id)), :method=&gt;:post do -%&gt;
&nbsp;&lt;%= hidden_field_tag 'group_id', @group.id %&gt;
&nbsp;&lt;div class="field"&gt;
&nbsp;&nbsp;&lt;%= text_area_tag 'message', nil, :rows =&gt; 10, :cols =&gt; 60 %&gt;
&nbsp;&lt;/div&gt;
&nbsp;&lt;div class="field"&gt;
&nbsp;&nbsp;&lt;%= check_box_tag 'send_via_email', 'yes', true %&gt; Send the whole group an email
&nbsp;&lt;/div&gt;
&nbsp;&lt;div class="actions"&gt;
&nbsp;&nbsp;&lt;%= submit_tag 'Save' %&gt;
&nbsp;&lt;/div&gt;
&lt;% end -%&gt;
&lt;%= link_to 'Back', url_for(groups_path) %&gt;

* When the form is submitted, it will post to the create action to create action in @app/controllers/posts_controller.rb@

p(codey). def create
&nbsp;@group = Mogli::Group.new({:id=&gt;params['group_id']}, current_facebook_client)
&nbsp;@group.fetch
&nbsp;if current_facebook_user
&nbsp;&nbsp;current_facebook_client.class.post(current_facebook_client.api_path(@group.id + '/feed'),
&nbsp;&nbsp;&nbsp;:query=&gt;current_facebook_client.default_params.merge(
&nbsp;&nbsp;&nbsp;&nbsp;{:name =&gt; "#{current_facebook_user.name} Post a message using app!",
&nbsp;&nbsp;&nbsp;&nbsp;:link=&gt;'http://staging.operations.engineyard.com/groups',
&nbsp;&nbsp;&nbsp;&nbsp;:message=&gt;params['message']}))
&nbsp;end
&nbsp;redirect_to groups_path(:current_group =&gt; params['group_id'])	
end

* Run your app via:

p(codey). rackup

h4(#pagination). Implementing pagination

"top":#top

* The Facebook Graph API return only the first 25 posts at a time. Here, we will provide links to get the next and previous items. First, we implement server side functionality to return json data. We do this by modifying the index method. this in @app/controllers/posts_controller.rb@.

p(codey). def index    
&nbsp;@group = Mogli::Group.new({:id=&gt;params['group_id']}, current_facebook_client)
&nbsp;@group.fetch
&nbsp;#getting posts for page 0
&nbsp;@posts = @group.feed
&nbsp;@page = 0
&nbsp;if params[:next]
&nbsp;&nbsp;#if 'next' parameter passed - lets get page to display
&nbsp;&nbsp;@page = params[:next].to_i 
&nbsp;&nbsp;# and get api url to get next or previous page
&nbsp;&nbsp;rest_url = (session[:page] &lt; @page) ? session[:posts_next] : session[:posts_prev]
&nbsp;&nbsp;# getting posts and map them to appropriate Mogli class
&nbsp;&nbsp;@posts = current_facebook_client.get_and_map_url(rest_url,@posts.classes)
&nbsp;end
&nbsp;# setting data to session to get url if the user want to see next
&nbsp;session[:posts_next] = @posts.next_url
&nbsp;session[:posts_prev] = @posts.previous_url 
&nbsp;session[:page] = @page
&nbsp;# render template to string
&nbsp;html = render_to_string :template =&gt; "posts/index.html.erb", :layout =&gt; false
&nbsp;# produce json output with html, next and previous pages.
&nbsp;render :json =&gt; {
&nbsp;&nbsp;:html =&gt; html,
&nbsp;&nbsp;:next =&gt; @page + 1,
&nbsp;&nbsp;:prev =&gt; @page &gt; 0 ? @page - 1 : nil
&nbsp;}
end

* Let's also modify the HTML for the groups page. This is located in @app/views/groups/index.html.erb@. We add a little spinny thing (which you can grab from our github repo, along with all of the source code for this application). We also add the previous and next buttons.
 
p(codey). &lt;div id="posts_container" &gt;&lt;/div&gt;
&lt;div id="loading_div"  style="display:none" &gt;&lt;%= image_tag "loading-spinner.gif", :alt =&gt; "Loading" %&gt;&lt;/div&gt;
&lt;div&gt;
&nbsp;&lt;input type="button" value="Previous" id="prev_btn" class="prvnxt" style="display:none"&gt; &lt;input type="button" value="Next" id="next_btn" class="prvnxt" style="display:none"&gt;
&lt;/div&gt;

h4(#looseends). Tying up loose ends

"top":#top

* Let's just check that our JavaScript is doing everything it needs to be in @app/views/groups/index.html.erb@. Gets default group. Check. Loads data. Check. Checks if current is default and marks the checkbox. Hmm, did we overlook that? Ok, well it's below. Send a clicked checkbox to the set_default method in groups controller. Yep.

p(codey). &lt;% content_for (:javascript) do %&gt;
&nbsp;var def_group = '&lt;%=@default_group%&gt;';
&nbsp;$(document).ready(function() {
&nbsp;&nbsp;// bind select group
&nbsp;&nbsp;$('#group').bind('change', function() {
&nbsp;&nbsp;&nbsp;$('#posts_container').html('&lt;p&gt;Loading...&lt;/p&gt;');
&nbsp;&nbsp;&nbsp;loadData('/groups/' + $(this).val() + '/posts', null)
&nbsp;&nbsp;&nbsp;//check if current group is default and mark checkbox checked or not
&nbsp;&nbsp;&nbsp;$('#def_group').attr('checked', $(this).val() == def_group);
&nbsp;&nbsp;});
&nbsp;&nbsp;// preload default group
&nbsp;&nbsp;loadData('/groups/&lt;%=@current_group%&gt;/posts', null);
&nbsp;&nbsp;// bind checkbox change
&nbsp;&nbsp;$('#def_group').bind('change', function() {
&nbsp;&nbsp;&nbsp;var group_id = $(this).is(':checked') ? $('#group').val() : 'nil'
&nbsp;&nbsp;&nbsp;$.post('/groups/set_default/' + group_id ,  function() {
&nbsp;&nbsp;&nbsp;&nbsp;alert ('Default group was saved');
&nbsp;&nbsp;&nbsp;});
&nbsp;&nbsp;&nbsp;//chenge default group
&nbsp;&nbsp;&nbsp;def_group = group_id == 'nil' ? null : group_id;
&nbsp;&nbsp;}); 
&nbsp;});  
  
* Also, we should add some Javascript that displays / hides the Next and Previous buttons appropriately. Whether they show up or not depends upon what comes back from the JSON package.

p(codey). &nbsp;function loadData(rem_url, params) {
&nbsp;&nbsp;var temp = rem_url; 
&nbsp;&nbsp;if (params != null ) {
&nbsp;&nbsp;&nbsp;temp += '?' + params;
&nbsp;&nbsp;}
&nbsp;&nbsp;$('#loading_div').show();
&nbsp;&nbsp;$.ajax({ url: temp,
&nbsp;&nbsp;&nbsp;dataType: 'json',
&nbsp;&nbsp;&nbsp;type: 'GET',
&nbsp;&nbsp;&nbsp;error: function(req,data) {
&nbsp;&nbsp;&nbsp;&nbsp;alert("Error getting remote data: " + data);
&nbsp;&nbsp;&nbsp;&nbsp;$('#loading_div').hide();
&nbsp;&nbsp;&nbsp;},
&nbsp;&nbsp;&nbsp;success: function(data) {
&nbsp;&nbsp;&nbsp;&nbsp;$('#loading_div').hide();
&nbsp;&nbsp;&nbsp;&nbsp;$('#posts_container').html(data.html);
&nbsp;&nbsp;&nbsp;&nbsp;if (data.next != null) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$('#next_btn').show();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$('#next_btn').unbind('click');
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$('#next_btn').click(function () { 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loadData(rem_url, 'next=' + data.next);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});
&nbsp;&nbsp;&nbsp;&nbsp;} else {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$('#next_btn').css('display', 'none');
&nbsp;&nbsp;&nbsp;&nbsp;}	
&nbsp;&nbsp;&nbsp;&nbsp;if (data.prev != null) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$('#prev_btn').show();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$('#prev_btn').unbind('click');
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$('#prev_btn').click(function () { 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loadData(rem_url, 'next=' + data.prev);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});
&nbsp;&nbsp;&nbsp;&nbsp;} else {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$('#prev_btn').css('display', 'none');
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;FB.XFBML.parse(document.getElementById('posts_container'));
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;});
&nbsp;}
&lt;% end %&gt;

h4(#fb2). Creating the second Facebook app for production.

"top":#top

* Go back and create another Facebook application for your production application. Name it the same thing minus the @_development@ bit.

!http://icanhazrails.com/images/anotherFB.png(fb app settings again)!

* Go back to the facebooker.yml file. Under your development settings, set your production settings.

p(codey). development:
&nbsp; app_id: your DEVELOPMENT application id
&nbsp; secret: your DEVELOPMENT application secret
&nbsp; api_key: your DEVELOPMENT application key
production:
&nbsp; app_id: your PRODUCTION application id
&nbsp; secret: your PRODUCTION application secret
&nbsp; api_key: your PRODUCTION application key

h4(#deploy). Deploying on Engine Yard

"top":#top

* Go to the Engine Yard home page and watch the "Tour of the Engine Yard Cloud":http://www.engineyard.com/pv/17825326 video

* We will expand this section in upcoming weeks.







