h3. (README) Building the Group Hug Rails app

These steps show you how to build a the Group Hug Rails application and deploy it on the Engine Yard Cloud. If you prefer video over written tutorials, you can view the "screencast here":http://engineyard.com/university. 

h4. Install Ruby, Rails, and create the app

* To install Rails on Windows, you can use the "Rails Installer":http://railsinstaller.org. 

* On OSX or Linux, you can use RVM by entering the following in your terminal ( see "prerequisites here":http://icanhazrails.com/home/prereqs ):

p(codey). curl -O -L http://rvm.beginrescueend.com/src/bootstrap_rails_environment && source ./bootstrap_rails_environment

* Create rails app:

p(codey). rails new grouphug

* Install facebooker2 as a plugin. This is a popular library for interfacing Rails applications with Facebook. "The github for Facebookr2 is here":https://github.com/mmangino/facebooker2

p(codey). script/rails plugin install git://github.com/mmangino/facebooker2.git

p(clues). *What's a plugin?* Watch this short screen cast by Ryan Bigg on Rails Plugins.

p(clues). *What's Facebookr2?* Watch this short screen cast by Christopher Johnson, the plugin's author.

h4. Create a Facebook application 

* Login to Facebook and visit "http://www.facebook.com/developers/createapp.php":http://www.facebook.com/developers/createapp.php.

* Create a new application. Name it whatever you wish.

!http://icanhazrails.com/images/fbapp.png(fb create app)!

* Click Create App

* Go to the Website settings, and set the site URL or IP address. For example, ours is http://icanhazrails.com/

!http://icanhazrails.com/images/wurl.png(fb website settings)!

h4. Configure Facebooker in Rails

* Copy the settings from your Facebook application page. To find your settings, go to "the facebook developer page":http://www.facebook.com/developers/ and click on the application you created. The page should appear as follows:

!http://icanhazrails.com/images/appsettings.png(fb app settings)!

* Create @config/facebooker.yml@ and paste the settings from your application page as follows:

p(codey). development:
&nbsp; app_id: your application id
&nbsp; secret: your application secret
&nbsp; api_key: your application key
production:
&nbsp; app_id: your application id
&nbsp; secret: your application secret
&nbsp; api_key: your application key

* Note: You should have a separate Facebook application for production and development, but in order to get things running, enter the same information for both development and production. Not a good practice, but acceptable for learning purposes.

* Create @config/initializers/facebooker2.rb@ and place the following line in it.

p(codey). Facebooker2.load_facebooker_yaml

* Add the following line to @app/controllers/application_controller.rb@

p(codey). include Facebooker2::Rails::Controller

* Put some code into @views/layouts/application.html.erb@ to display the Facebook login button on every page. The conditional logic will replace the login button with the user's name, if he/she is already logged in.

p(codey). <%# include JavaScript to use facebook connect%>
<%=fb_connect_async_js%>
<%if current_facebook_user !=nil%>
<%="Welcome #{@current_user.name}!"  if @current_user !=nil%>
<%=fb_logout_link("Logout", request.url)%><br />
<%else%>
<%=fb_login_and_redirect( url_for(:action => 'create', :controller => 'home', :only_path => false), :perms => 'email,user_groups,read_stream, publish_stream')%>
<%end%>
	
* Create the model to store application users

p(codey). rails generate model User
	
* Then create a database migration file by typing

p(codey). rails generate migration create_users

This creates a file in the folder @db/migrate/@ named something like @20110203050933_create_users.rb@

p(codey). class CreateUsers < ActiveRecord::Migration
&nbsp;def self.up
&nbsp;&nbsp;create_table :users do |t|
&nbsp;&nbsp;t.string :email, :name, :facebook_id, :facebook_session_key, t.timestamps
&nbsp;&nbsp;end
&nbsp;end
&nbsp;
&nbsp;def self.down
&nbsp;&nbsp;drop_table :users
&nbsp;end
end

* Run the migration
  
p(codey). rake db:migrate
  
* Create the home controller and login action
   
p(codey). rails generate controller Home

* Open the page you just created @app/controllers/home_controllers.rb@

* Create an empty action for the login page, this will just show the login button, which we already put on the application.html.erb page.

p(codey). def login
end

* Create two other methods  in the same controller, underneath the login action. The first action will be called @create@ and it will create a session. The second one will be called create_via_facebook_connect and it is called from the former method to grab the user id for this facebook user from the local database, or create a new record if the user has never signed into group hug before. 

p(codey). def create
&nbsp;&#64;user = User.find_by_email(params[:email]) 
&nbsp;create_via_facebook_connect if &#64;user.nil?
&nbsp;if &#64;user != nil 
&nbsp;&nbsp;session[:user_id] = &#64;user.id
&nbsp;&nbsp;redirect_to url_for(groups_path)
&nbsp;&nbsp;session[:return_to]=nil
&nbsp;else
&nbsp;&nbsp;flash[:error] = "Unable to log you in"
&nbsp;&nbsp;render :action=>"login"
&nbsp;end
end
&nbsp;
def create_via_facebook_connect
&nbsp;if current_facebook_user 
&nbsp;&nbsp;#look for an existing user
&nbsp;&nbsp;&#64;user = User.find_by_facebook_id(current_facebook_user.id)	  
&nbsp;&nbsp;if &#64;user.nil?
&nbsp;&nbsp;&nbsp;#if one isn't found - fetch user data via Mogli lib and create new user
&nbsp;&nbsp;&nbsp;current_facebook_user.fetch
&nbsp;&nbsp;&nbsp;&#64;user = User.new(:name => current_facebook_user[:name], :email => current_facebook_user[:email], :facebook_id => current_facebook_user[:id], :facebook_session_key => current_facebook_client.access_token)
&nbsp;&nbsp;&nbsp;&#64;user.save
&nbsp;&nbsp;end
&nbsp;end
end

* Create an empty view for the login page (again, the login button is one the application.html.erb page)

p(codey). rails generate view home login
  
* Open and edit the page you just created ( @app/views/home/login.html.erb@ )

p(codey). def create
&nbsp;&#64;user = User.find_by_email(params[:email])
&nbsp;create_via_facebook_connect if &#64;user.nil?
&nbsp;if &#64;user != nil 
&nbsp;&nbsp;session[:user_id] = &#64;user.id
&nbsp;&nbsp;redirect_to url_for(groups_path)
&nbsp;&nbsp;session[:return_to]=nil
&nbsp;else
&nbsp;&nbsp;flash[:error] = "Unable to log you in"
&nbsp;&nbsp;render :action=>"login"
&nbsp;end
end
&nbsp;
def create_via_facebook_connect
&nbsp;if current_facebook_user 
&nbsp;&nbsp;#look for an existing user
&nbsp;&nbsp;&#64;user = User.find_by_facebook_id(current_facebook_user.id)	  
&nbsp;&nbsp;if &#64;user.nil?
&nbsp;&nbsp;&nbsp;#if one isn't found - fetch user data via Mogli lib and create new user
&nbsp;&nbsp;&nbsp;current_facebook_user.fetch
&nbsp;&nbsp;&nbsp;&#64;user = User.new(:name => current_facebook_user[:name], :email => current_facebook_user[:email], :facebook_id => current_facebook_user[:id], :facebook_session_key => current_facebook_client.access_token)
&nbsp;&nbsp;&#64;user.save
&nbsp;&nbsp;end
&nbsp;end
end

* After successful login users will go to groups controller.  Let's create a groups controller first:

p(codey). rails generate controller Groups
	  
* Now we can edit @config/routes.rb@ to send people to the groups controller whenever a url is requested with the verb 'groups' after the domain name. For instance @http://icanhazrails.com/groups@ will load the controller @app/controllers/groups_controller.rb@. You created that controller when you typed the generate command in the last step.
    
p(codey). resources :groups 
   
* Set the home page to login
   
       root :to => "home#login"

   and allow to use '<controller>/<action>'	routes. Just uncomment last route
   
       match ':controller(/:action(/:id(.:format)))'
	   
9. Add methods to ApplicationController to check if user is logged in and determine user id:

	  def current_user
		if session[:user_id]
		  @current_user ||= User.find(session[:user_id])
		elsif current_facebook_user and @current_user.nil?
		  @current_user = User.find_by_facebook_id(current_facebook_user.id)
		end
	  end
	  
	  helper_method :current_user
	  
	  
	  def login_required
		if current_user.nil?
		  flash[:notice] = "You must login to access this page"
		  session[:return_to] = request.request_uri
		  redirect_to :controller =>'home', :action =>'login' and return
		end
	  end

10. Implement GroupsController

	  def index 
		#get current users groups
		@groups = current_facebook_user.groups
		
		#determine selected user group or get first group id if default group is not selected
		@default_group = @current_user.default_group
		@default_group = @groups.first.id if @default_group.nil? && @groups.first != nil
	  end
	
11. Implement goups view in app/views/groups/index.html.erb


		<select name="group" id="group" >
		<% @groups.each do |group| %>
		 <option value="<%=group.id%>" <%= 'selected' if @default_group == group.id %>><%=group.name%></option>
		<% end %>
		</select>

		<br/>
		<input id="def_group" name="def_group" type="checkbox" selected="false" /> Default group <br/>

		<div id="posts_container" >Posts</div>
	
12. Install jQuery via instructions at https://github.com/lleger/Rails-3-jQuery/ 

13. Add placeholder for JavaScript at layout header

	  <script> 
	  <%= yield (:javascript) %>
	  </script>
	
	and create JavaScript to save default group
		
		<% content_for (:javascript) do %>
		$(document).ready(function() {

		  $('#def_group').bind('change', function() {
			var group_id = $(this).is(':checked') ? $('#group').val() : 'nil'
			$.post('/groups/default/' + group_id ,  function() {
			  alert ('Default group was saved');
			});
		  });
		 
		});  
		<% end %>

     So now we have combo box with all user groups.
	 
14. Implement default group save in GroupsController

	  def default
		render :json => { :result => @current_user.update_attributes(:default_group => params['id'] == 'nil' ? nil : params['id']) }
	  end

15. Implement Posts in current group displaying. 
     
	 rails generate controller Groups
	 
	Lets use nested resouces to relate groups and posts. Setup routes this way:
	
	  resources :groups do
		resources :posts
	  end
	
16. Call Posts List in groups view via jQuery:

    Implement 'change' event:

	  $('#group').bind('change', function() {
		$('#posts_container').load('/groups/' + $(this).val() + '/posts',  function() {
		  FB.XFBML.parse(document.getElementById('posts_container'));
		});
	  });

	And implement default group display on page load:
	  
	  $('#posts_container').load('/groups/<%=@default_group%>/posts',  function() {
		FB.XFBML.parse(document.getElementById('posts_container'));
  
	  });

	Posts controller will return user images in FBML, so we must parse FBML via FB.XFBML.parse
	 
17. Posts list in selected group to insert via AJAX:

	  def index    
		@group = Mogli::Group.new({:id=>params['group_id']}, current_facebook_client)
		@group.fetch
		@posts = @group.feed
		render :layout => false
	  end

     view template can be like:
	 
	<% @posts.each do |post| %>

	<div style="clear:both">
	  <span style="float:left;width:55px">
		<fb:profile-pic uid="<%=post.from.id%>" linked="false" size="q"></fb:profile-pic>
	  </span>
	  <span>
		<%=post.message%><br/> 
		<%=time_ago_in_words(post.updated_time) %> ago
	  </span>
	</div>

	<% end %>
	 

18. Link to post new message used nested resource path:

	<%= link_to "Post", url_for(new_group_post_path(@group.id)) %>	
	
19. Display form to post message to group. PostsController get current group to display name:

	  def new
		@group = Mogli::Group.new({:id=>params['group_id']}, current_facebook_client)
		@group.fetch
	  end

	and simple view:
	
	<h1>Post a wall message to: <%= @group.name %></h1>

	<% form_tag  url_for(group_posts_path(@group.id)), :method=>:post do -%>
	 
	  
	  <%= hidden_field_tag 'group_id', @group.id %>
	  
	  <div class="field">
		<%= text_area_tag 'message', nil, :rows => 10, :cols => 60 %>
	  </div>
	  <div class="field">
		<%= check_box_tag 'send_via_email', 'yes', true %> Send the whole group an email
	  </div>
	  <div class="actions">
		<%= submit_tag 'Save' %>
	  </div>
	<% end -%>
	 
	<%= link_to 'Back', url_for(groups_path) %>

20. Form submited to create action

	  def create
		@group = Mogli::Group.new({:id=>params['group_id']}, current_facebook_client)
		@group.fetch

		if current_facebook_user
		  current_facebook_client.class.post(current_facebook_client.api_path(@group.id + '/feed'),
				:query=>current_facebook_client.default_params.merge(
						   {:name => "#{current_facebook_user.name} Post a message using app!",
							:link=>'http://staging.operations.engineyard.com/groups',
							:message=>params['message']})).inspect
		end
		redirect_to groups_path	
	  end

21. Run your app via 'rackup' command

22. Implementing pagging for posts.
Facebook Graph API return only first 25 posts, also it provide links to get next and previous items.
So for pagging lets implement server side functionlity to return json data with list html(like it works now), next and previous pages.

22.1 Server side implementation in posts_controller.rb:

  def index    
    @group = Mogli::Group.new({:id=>params['group_id']}, current_facebook_client)
	@group.fetch
	
	#getting posts for page 0
    @posts = @group.feed
	@page = 0
	
	if params[:next]
	  #if 'next' parameter passed - lets get page to display
	  @page = params[:next].to_i 
	  
	  # and get api url to get next or previous page
	  rest_url = (session[:page] < @page) ? session[:posts_next] : session[:posts_prev]
	  
	  # getting posts and map them to appropriate Mogli class
	  @posts = current_facebook_client.get_and_map_url(rest_url,@posts.classes)
	end
	
	# setting data to session to get url if user want to see next
	session[:posts_next] = @posts.next_url
	session[:posts_prev] = @posts.previous_url 
    session[:page] = @page
	
	# render template to string
	html = render_to_string :template => "posts/index.html.erb", :layout => false
	
	# produce json output with html, next and previous pages.
	render :json => {
	  :html => html,
	  :next => @page + 1,
	  :prev => @page > 0 ? @page - 1 : nil
    }
  end

22.2. Implementing client side html in \views\groups\index.html:
 
<div id="posts_container" ></div>

<div id="loading_div"  style="display:none" ><%= image_tag "loading-spinner.gif", :alt => "Loading" %></div>

<div>
<input type="button" value="Previous" id="prev_btn" class="prvnxt" style="display:none"> <input type="button" value="Next" id="next_btn" class="prvnxt" style="display:none">
</div>

22.3. and JavaScript in \views\groups\index.html:

<% content_for (:javascript) do %>
var def_group = '<%=@default_group%>';
$(document).ready(function() {
  // bind select group
  $('#group').bind('change', function() {
    $('#posts_container').html('<p>Loading...</p>');
	loadData('/groups/' + $(this).val() + '/posts', null)

	//check if current group is default and mark checkbox checked or not
	$('#def_group').attr('checked', $(this).val() == def_group);
  });

  // preload default group
  loadData('/groups/<%=@default_group%>/posts', null);

  // bind checkbox change
  $('#def_group').bind('change', function() {
	var group_id = $(this).is(':checked') ? $('#group').val() : 'nil'
	$.post('/groups/default/' + group_id ,  function() {
	  alert ('Default group was saved');
	});
	//chenge default group
	def_group = group_id == 'nil' ? null : group_id;
  });
    
  });  
    
// load data to 'posts_container' and 
// display/hide 'Next' and 'Previous' buttons depending of returned json
function loadData(rem_url, params) {
  var temp = rem_url; 
  if (params != null ) {
    temp += '?' + params;
  }
  $('#loading_div').show();
  
  $.ajax({ url: temp,
  dataType: 'json',
  type: 'GET',
  error: function(req,data) {
    alert("Error getting remote data: " + data);
    $('#loading_div').hide();
  },
  success: function(data) {
    $('#loading_div').hide();
    $('#posts_container').html(data.html);
	if (data.next != null) {
		$('#next_btn').show();
		$('#next_btn').unbind('click');
		$('#next_btn').click(function () { 
			loadData(rem_url, 'next=' + data.next);
		});
	} else {
		$('#next_btn').css('display', 'none');
    }	
	if (data.prev != null) {
		$('#prev_btn').show();
		$('#prev_btn').unbind('click');
		$('#prev_btn').click(function () { 
			loadData(rem_url, 'next=' + data.prev);
		});
	} else {
		$('#prev_btn').css('display', 'none');
	}
	FB.XFBML.parse(document.getElementById('posts_container'));
  }
  });

}

<% end %>

